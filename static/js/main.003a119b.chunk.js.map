{"version":3,"sources":["Components/Navbar.js","Components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","home","class","onClick","toggleMode","for","Form","useState","text","setText","instruction_heading","value","rows","onChange","event","console","log","target","style","paddingLeft","newText","toUpperCase","color","marginLeft","newTextLower","toLowerCase","length","split","App","setmode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAMe,SAASA,EAAOC,GAG3B,OAEF,qBAAKC,UAAS,0CAAqCD,EAAME,KAA3C,eAAsDF,EAAME,MAA1E,SACA,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BACzF,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBADzE,SAEE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,SAA6DH,EAAMO,WAKvE,sBAAMN,UAAU,WAEhB,sBAAKO,MAAM,wCAAX,UACF,uBAAOA,MAAM,mBAAmBC,QAAST,EAAMU,WAAYL,KAAK,WAAWC,GAAG,2BAC/E,uBAAOE,MAAM,mBAAoBG,IAAI,yBAArC,kCC3BY,SAASC,EAAKZ,GACzB,MAAqBa,mBAAS,yDAA9B,mBAAMC,EAAN,KAAYC,EAAZ,KA2BA,OAEI,qCAEA,sBAAKd,UAAU,iBAAf,UACA,6BAAKD,EAAMgB,sBACP,qBAAKf,UAAU,OAAf,SAEA,0BAAUA,UAAU,eAAeK,GAAG,QAAQW,MAAOH,EAAMI,KAAK,IAAIC,SAjCxD,SAACC,GAEjBC,QAAQC,IAAI,sBACZP,EAAQK,EAAMG,OAAON,YAgCrB,iCACI,wBAAQhB,UAAU,eAAeK,GAAG,OAAOkB,MAAO,CAAEC,YAAY,GAAIhB,QA3BzD,WAEfY,QAAQC,IAAI,mCAAoCR,GAChD,IAAIY,EAAQZ,EAAKa,YAAYb,GAC7BC,EAAQW,IAuBJ,sBACA,wBAAQzB,UAAU,eAAe2B,MAAM,OAAOtB,GAAG,OAAOkB,MAAO,CAACK,WAAW,IAAKpB,QApBhE,WAEpBY,QAAQC,IAAI,kCAAkCR,GAC9C,IAAIgB,EAAahB,EAAKiB,YAAYjB,GAClCC,EAAQe,IAgBJ,+BAGA,sBAAK7B,UAAU,YAAY,UAA3B,UACA,qDACA,sDAAyBa,EAAKkB,OAA9B,mBAAsDlB,EAAKmB,MAAM,KAAKD,OAAtE,oBCTGE,MA9Bf,WAEE,MAAwBrB,mBAAS,SAAjC,mBAAOX,EAAP,KAAaiC,EAAb,KAYA,OACE,qCACA,cAACpC,EAAD,CAAQK,MAAM,iBAAiBG,KAAK,OAAOL,KAAMA,EAAMQ,WAZ1C,WAGbyB,EADU,UAAPjC,EACK,OAGA,YAOR,qBAAKD,UAAU,YAAY,UAA3B,SACA,cAACW,EAAD,CAAMI,oBAAoB,8BCffoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.003a119b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n   \r\n    return (\r\n        \r\n  <nav className={`navbar navbar-expand-lg  navbar-${props.mode} bg-${props.mode}`} >\r\n  <div className=\"container-fluid\"> \r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\"\r\n     aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.home}</a>\r\n        </li>\r\n        \r\n        \r\n      </ul>\r\n      <form className=\"d-flex\">\r\n      </form>\r\n      <div class=\"form-check form-switch text-secondary\" >\r\n    <input class=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n   <label class=\"form-check-label\"  for=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n  </div>\r\n    </div>\r\n  </div>\r\n  \r\n\r\n</nav>\r\n        \r\n    )\r\n}\r\n\r\nNavbar.propTypes=\r\n{\r\n  title:PropTypes.string.isRequired,\r\n  home:PropTypes.string.isRequired\r\n\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function Form(props) {\r\n    const[text, setText]=useState(\"Enter the text here to convert to lower or upper case\");\r\n\r\n    const onchangeEvent=(event)=>\r\n    {\r\n        console.log(\"onchange triggered\");\r\n        setText(event.target.value);       // changing the state of variable text as we type\r\n                                            \r\n       \r\n\r\n    }\r\n\r\n    const onclickEvent=()=>\r\n    {\r\n        console.log(\"Onclick triggered for upper-case\"+ text);\r\n        let newText=text.toUpperCase(text);\r\n        setText(newText);\r\n\r\n    }\r\n\r\n    const onclickEventLower=()=>\r\n    {\r\n        console.log(\"onclick triggred for lower-case\"+text);\r\n        let newTextLower=text.toLowerCase(text);\r\n        setText(newTextLower);\r\n    }\r\n    \r\n    \r\n    return (\r\n        \r\n        <>\r\n        \r\n        <div className=\"container my-3\">\r\n        <h2>{props.instruction_heading}</h2>\r\n            <div className=\"mb-3\">\r\n            \r\n            <textarea className=\"form-control\" id=\"myBox\" value={text} rows=\"8\" onChange={onchangeEvent}></textarea>\r\n            </div>\r\n        <span>\r\n            <button className='btn btn-dark' id=\"btn1\" style={{ paddingLeft:2}} onClick={onclickEvent} >Click-Up</button>\r\n            <button className='btn btn-dark' color='blue' id=\"btn2\" style={{marginLeft:50}} onClick={onclickEventLower}>Click-lower</button>\r\n        </span>\r\n        </div>    \r\n            <div className=\"container\" my-3>\r\n            <h5 >Here's the analysis</h5>\r\n            <p>The text entered has {text.length} characters and {text.split(\" \").length} words .</p>\r\n            </div>\r\n\r\n        </>\r\n            \r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Form from './Components/Form'; \nimport About from './Components/About';\nimport React, { useState } from 'react';\n\n\n\nfunction App() {\n\n  const [mode, setmode] = useState('light');\n\n  let toggleMode=()=>\n  {\n    if(mode==='light')\n    setmode('dark');\n\n    else\n    setmode('light');\n  }\n\n\n  return (\n    <>\n    <Navbar title=\"Play-with-Text\" home=\"Home\" mode={mode} toggleMode={toggleMode}></Navbar> \n    <div className=\"container\" my-3>\n    <Form instruction_heading=\"Enter the text here\"></Form>  \n    </div>\n    \n\n\n\n    </>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}